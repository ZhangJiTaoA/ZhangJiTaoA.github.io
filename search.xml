<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python学习笔记04]]></title>
    <url>%2F2019%2F06%2F02%2Fpython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004%2F</url>
    <content type="text"><![CDATA[函数，修饰器 函数1. 函数的定义123456def print_ok(): # 函数的定义格式 print('ok!') # 函数内执行的语句 return True #函数的返回值，可以不写print_ok() # 函数的调用# 执行结果：ok！ 函数的返回值如果没有指定，则系统自动返回none 2. 函数的参数 必须参数: 按照定义的时候的参数的顺序传入 123456789101112def add(a, b): # 定义两个参数 print("%d+%d=%d" % (a, b, a+b)) # 函数中的格式化字符串，执行语句 st = "&#123;a&#125;+&#123;b&#125;=&#123;result&#125;" st = st.format(a=a, b=b, result=a+b) # 复习字符串的格式化 print(st) return Trueadd(1, 2) #调用函数# 执行结果：1+2=31+2=3 关键字参数： 123456789101112def print_info(name, age): # 定义一个打印信息的函数 print('name:%s' % (name,)) print('age:%d' % (age,))print_info('海涛', 18) # 调用函数print('分隔'.center(50, '-')) # 字符串的方法，分隔两次调用print_info(age=19, name='涛哥' ) # 关键字传入参数，可以不按照顺序。# 执行结果：name:海涛age:18------------------------分隔------------------------name:涛哥age:19 默认参数：在定义的时候定义： 123456789def print_info(name, age, sex='male'): # 默认参数，定义时默认的参数必须在最后 print("name:%s,age:%d,sex:%s" % (name, age, sex,))print_info('海涛', 18, ) # 调用，打印默认的值print_info('海涛', 18, sex='female') # 调用，给默认值赋值，覆盖原有的值print_info('海涛', 18, 'female') #另一种方法# 执行结果：name:海涛,age:18,sex:malename:海涛,age:18,sex:femalename:海涛,age:18,sex:female 不定长参数 12345678910111213141516171819202122232425# 第一种不定长参数def add(*args): # 定义不定长参数，加一个*符号：将传入的参数做成一个元组 print(type(args)) # 打印传入的内容的类型 my_sum = 0 for i in args: my_sum += i print(my_sum)add(1, 2, 3, 4) # 传入四个数字，当然也可以传入多个数字# 执行结果：&lt;class 'tuple'&gt;10-----------------------------------------------------------------# 第二种不定长参数def print_info(**kwargs): # 加两个**符号：将传入的参数做成一个字典 print(type(kwargs)) # 打印传入的参数的类型 for k, v in kwargs.items(): print(k, ':', v)print_info(name="海涛", height=180, ishandsome=True) # 执行结果：&lt;class 'dict'&gt;name : 海涛height : 180ishandsome : True 以函数为参数（高阶函数） 123456789def f(n): # 这个函数，求n的平方 return n*ndef foo(a, b, func): # 函数名作为参数 c = func(a) + func(b) return cprint(foo(1, 2, f))# 执行结果：5 二. 修饰器1. 预备知识 作用域：我们在某一个函数内引用一个变量时，系统如何在代码中查找变量呢？查找顺序：L_E_G_B，如下123456a = 10 #Gdef func(): b = 9 #E def abc(): # 函数中的内部函数， c = 8 #L return 1 高阶函数，：1.函数可以作为函数的参数传入，2. 函数可以作为返回值返回，3. 闭包的概念 闭包的概念：闭包定义：如果在一个内部函数里面，对在外面的作用域（但不是全局作用域）的变量进行引用，那么内部函数被认为是闭包。 闭包的例子: 123456789101112def outer(): x = 10 def inner(): # 内嵌函数 #条件一：是内部函数 print(x) # 条件二：对外部变量引用 return inner # 结论：是一个闭包outer()() # 调用innerf = outer()f() # 调用inner，可以拿到x的值，说是闭包# 执行结果：10 10 2. 修饰器 开发封闭原则，对修改封闭，对扩展开放。就是，写好一个方法以后就不让修改了，但是还保留扩展的特性 修饰函数，重新写一个函数，可以在这个函数中写一个内嵌函数，内嵌函数中可以对原有的函数进行扩展，然后返回这个内嵌函数。这个函数就是修饰函数，然后通过特定的格式，把实现了新功能的函数赋给原函数例如有一个函数foo()，现在要拓展它的功能，在执行完该函数后打印该函数执行的时间，但是不要修改foo()内部以及函数名 实现如下：12345678910111213141516import timedef show_time(func): #装饰函数 def inner(): start = time.time() func() # 在内嵌函数中调用传入的函数，实现原来的功能 end = time.time() print(end - start) return inner # 返回这个内嵌函数@show_time #相当于 foo = show_time(foo)def foo(): # 原来的foo函数， print("foo......") time.sleep(1)foo() # 函数的执行调用 原来的函数有参数： 12345678910111213141516def show_time(func): def inner(*x): # 在内嵌函数中传入一个不定长参数， start = time.time() func(*x) # 将该不定长参数给原来的函数 time.sleep(1) end = time.time() print(end-start) return inner # 返回内嵌函数@show_time # 相当于add = show_time(add)def add(a, b): sum = a + b print(sum)add(1, 2) 修饰函数设置开关： 比如我想将一些内容打印到日志中，可以使用以下方法 12345678910111213141516171819def logger(flag): # 在最外边加一个函数 def show_time(func): def inner(*x): start = time.time() func(*x) time.sleep(1) end = time.time() print(end-start) if flag == 'true': print("日至记录") return inner return show_time@logger('true') #相当于@show_time，或者说 add = logger('true')(add)def add(a, b): sum = a + b print(sum)add(1,2)]]></content>
      <categories>
        <category>吃</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记03]]></title>
    <url>%2F2019%2F06%2F02%2Fpython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%2F</url>
    <content type="text"><![CDATA[文件操作，集合，深浅拷贝 一. 文件操作1. 基本读写文件的方式12345678910# open第一个参数是文件名(也可以是一个路径)，如果文件存在则打开存在文件，不存在则新建文件，第二个为打开方式，之后会一一介绍各种打开方式，最后一个参数为编码方式f = open('MyTxt', 'w', encoding='utf8') # w写模式，会清空文件内容，写的基础是什么内容也没有f.write('''无题·昨夜星辰昨夜风作者：李商隐昨夜星辰昨夜风，画楼西畔桂堂东。身无彩凤双飞翼，心有灵犀一点通。隔座送钩春酒暖，分曹射覆蜡灯红。嗟余听鼓应官去，走马兰台类转蓬。''') # 将hiatao字符串写入文件f.close() # 每一次打开一个文件，操作完成后要关闭，否则会有意想不到的错误----------------------------------------------------------------------------------------------------------------- 文件的读和写操作通过文件中的光标来定位，从而知道该从哪里写，从哪里读。首先介绍一下相应的方法f.tell() # 返回光标当前位置，一个英文字符占一个，中文占三个(标准，是编码的关系)f.seek(4) # 调整光标位置，这里表示到第四个字节的位置f.truncate(10) # 截断，打开方式应该为’a’，表示从第十个字节之后的都删除，只保留前十个字节 1234567891011121314151617181920212223242526272829303132333435-----------------------------------------------------------------------------------------------------------------# 以读的方式打开文件f = open('MyTxt', 'r', encoding='utf8') print(f.read(4)) # f.read(4)读取前四个字符，一个汉字为一个字符。执行完成后，光标指向第五个字符# 执行结果：无题·昨print(f.readline()) # f.readline()读取一行，因为上一条语句已经读取四个字符，文件内读指针已经指到第五个字符，所以这里读取了这一行剩下的字符，执行完成后光标--指向第二行第一个字符# 执行结果：夜星辰昨夜风print(f.readlines()) #f.readlines() 读取每一行字符，返回一个列表# 执行结果：['作者：李商隐\n', '昨夜星辰昨夜风，画楼西畔桂堂东。\n', '身无彩凤双飞翼，心有灵犀一点通。\n', '隔座送钩春酒暖，分曹射覆蜡灯红。\n', '嗟余听鼓应官去，走马兰台类转蓬。']f.close()------------------------------------------------------------------------------------------------------------------# 以读的类型打开文件f = open('MyTxt', 'r', encoding='utf8')for i in f: # 跟for i in f.readlines 不一样，for循环内部做成一个迭代器（用一个取一个） print(i.strip()+" ") # i打印完就没了，不在程序中f.close()# 程序执行结果：就是将内容原封不动的打印出来。# 迭代器之后会涉及到。--------------------------------------------------------------------------------------------------------------------# 以追加的方式打开文件，f = open('MyTxt', 'a', encoding='utf8')f.write('哈哈哈') # 在文件的末尾添加该字符串f.close() ---------------------------------------------------------------------------------------------------------------------# r+读写模式(使用最多)，w+写读模式（清空，写从头写，读的时候也从头读。。但是我失败了。。），a+追加读f = open('MyTxt','r+',encoding='utf8') # 读该怎么读怎么读，写就在最后写(除非之前指定位置),写和读用的两组光标print(f.read(1)) # 读取第一个字符f.write('哈哈') # 在文件的末尾加入字符串# ----获取特定的字符for j,i in enumerate(f.readlines()): # enumerate() 函数，返回一个列表，每个列表元素为一个二维元组 if i.startswith('身') : # 如果该行以’身‘开头，那么进行操作。。 i = ''.join([i.strip(),'zhangjitao']) print(i.strip(),j)# ----f.close() 2. 读写文件的基本操作123print(f.fileno()) # 每打开一个文件都会有一个唯一的编号print(f.isatty()) # 查看是否为真正的终端设备print(f.readable()) # 是否可读 3. 读写文件的缓存问题 在我们向文件中写东西的时候，如果没有执行到f.close(),则已经写的内容不会出现在文件中通过f.flush()将内容压入1234567891011import timef = open('MyTxt', 'a', encoding='utf8')f.write('zhangjitao')time.sleep(20) # 执行完写的语句，等待20秒后才真正写入文件f.close()---------------------------------f = open('MyTxt', 'a', encoding='utf8')f.write('zhangjitao')f.flush() # 直接将缓存中的内容写入硬盘time.sleep(20) # #执行完写的语句，等待20秒后才真正写入文件f.close() 实例12345import sys,timefor i in range(30): sys.stdout.write("*") # 只是放到缓存，到最后一次打印:****************************** sys.stdout.flush() # sys.stdout为一个文件对象。先将该语句注释，之后再取消注释，查看效果。。就懂了。。 time.sleep(1) 4. 修改已有文件内容 一般不直接在源文件之中修改，而是在查询需要修改的内容的过程中将源文件拷贝到新文件中同时修改。12345678f = open('1', 'r+', encoding='utf-8')f2 = open('2', 'w', encoding='utf-8')for i in f: if i.startswith('画'): i = ''.join([i.strip(), 'hhhh\n']) f2.write(i) # 将修改过后或者没有修改的内容写入新文件。。f2.close()f.close() 5. 另一种格式12345# with打开文件省去close（）with open('','') as f: #相当于open（）。。。。。。close（） f.readline() f.write()with open() as f,open() as f2: #打开两个文件 二. 深浅拷贝 个人理解，指的是：我是只拷贝了你一个地址还是拷贝了你的所有内容。。这又涉及到可变类型和不可变类型了不再细讲，之后有时间另开一节细讲。12import copy # 在copy模块中有一个方法deepcopy()能够深拷贝，。copy.deepcopy() 三. 集合(一个数学工具)离散数学学过的。。 在程序中的作用：1.去重, 2.关系测试,3.交集,并集,子集,超集 集合的特性： 集合的对象必须是可哈希的,可以作字典的健 set是无序的,且不可重复,可变集合 但是集合本身不可哈希 不可变集合frozenset 通过in和not in 判断元素是否在集合里面 1. 创建1234s = set('alex li') # 有重复的保留一个print(s) # 执行结果： &#123;' ', 'a', 'i', 'x', 'e', 'l'&#125;s1 = ['zhang', 'ji', 'zhang'] # 一个列表print(set(s1)) # 执行结果：&#123;'ji', 'zhang'&#125; 2. 更新12345678910111213li = [1, 2, 'zhangjitao']s = set(li)print(s) # 执行结果：&#123;1, 2, 'zhangjitao'&#125;s.add('haitao') # 作为一个元素添加print(s) # 执行结果：&#123;1, 2, 'zhangjitao', 'haitao'&#125;s.update('ops') # 作为一个序列添加print(s) # 执行结果：&#123;1, 2, 'zhangjitao', 'haitao', 's', 'p', 'o'&#125;s.update([12, 'eee'])print(s) # 执行结果：&#123;1, 2, 'zhangjitao', 'haitao', 12, 's', 'p', 'eee', 'o'&#125; 3. 删除12345s.remove(2)print(s) # 执行结果：&#123;1, 'haitao', 'eee', 12, 'p', 'zhangjitao', 's', 'o'&#125;s.pop() #随机删除print(s) # 执行结果：&#123;'haitao', 'eee', 12, 'p', 'zhangjitao', 's', 'o'&#125;s.clear() # 清除 4. 方法12345678910111213141516171819202122232425print(set('zhang') &lt; set('zhangjit')) # 包含关系,子集,# 执行结果：Truea = set([1, 2, 3, 4, 5])b = set([4, 5, 6, 7, 8])c = a.intersection(b) # 取交集:a&amp;bprint(c)# 执行结果：&#123;4, 5&#125;d = a.union(b) # 取并集:a|bprint(d)# 执行结果：&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;e = a.difference(b) # 取差集,a里面有,b里面没有 :a-bprint(e)# 执行结果：&#123;1, 2, 3&#125;f = a.difference(b).union(b.difference(a))g = a.symmetric_difference(b) # 取对称差集 :a^bprint(g)# 执行结果：&#123;1, 2, 3, 6, 7, 8&#125;# 父集,和子集h = a.issuperset(b) # 父集 &gt;k = a.issubset(b) # 子集 &lt;print(k)# 执行结果：False]]></content>
      <categories>
        <category>吃</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记02]]></title>
    <url>%2F2019%2F05%2F17%2Fpython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%2F</url>
    <content type="text"><![CDATA[字典，字符串，编码解码提示： python中所有类型都是对象，其中整形，字符串，元组等为不可变类型列表，字典为可变类型 所谓可变和不可变顾名思义，就是一个对象在内存中分配地址后，该地址中的内容是否可以改变。可以在python中通过id()函数查看变量的地址这里不详细解释，有问题自己 吧，当然也可以问我哦。 一. 字典 何谓字典，也许听说过一个词语叫键值对，就是一一映射的关系，python中将这种关系封装起来为一个数据类型为字典：比如我叫海涛，海涛就是键，我本人就是值。 1. 创建1234# 使用**&#123;&#125;**来表示一个字典，# 使用 **:** 来分隔**键**和**值**,# 使用 **,** 分隔开一组一组的键值对。dic = &#123;'name':'haitao', 'age':12, 'hobby':&#123;'gril_name':'tiechui','gril_age':'100'&#125;, 'is_handsome':True&#125; 注意：键值对在字典中的存储是乱序存储的，不像列表和元组是严格按照顺序存储，依旧是说不能通过索引下标访问列表元素。 12345# 通过工厂函数创建字典，列表，元组a = list() # list()即是工厂函数，表示创建了一个空列表，a = list([1, 2, 3]) # 创建的列表为[1, 2, 3],这里[]也可以换为()dic = dict((('name','zhangjitao'),)) # dict()为工厂函数，函数内的括号表示输入的初值,最里面的括号表示一对键值对。dic = dict((['name','zhangjitao'],)) # 最后加一个逗号是习惯，今后会用得到。 2. 查询(访问)1234print(dic['name']) # 通过键查找print(dic.keys()) # 打印所有键，返回一个迭代类型，不是列表类型，通过list（）转换为列表print(list(dic.values())) # 打印所有键，返回一个迭代类型，通过list（）转换为列表print(dic.items()) # 返回键值对 3. 修改1234dic['name'] = 'haitao' # 该键("name")已有则修改，没有则添加dic4 = &#123;'sex':'boy','age':33,'hobby':'skfla'&#125;dic.update(dic4) # 已有则覆盖，没有就加入，类似list.extend（） 4. 删除12345678del dic['name'] # 通过del关键字删除dic.clear() # 清空dic.pop('age') # 删除，有返回值a = dic.popitem() #随机删除一个del dic #删除字典 5. 其他操作涉及到的方法123456789101112dic = dict.fromkeys(['host1','host2','host3'],'test') #列表中每一个都为键，后一个为值print(dic) # 执行结果： &#123;'host1': 'test', 'host2': 'test', 'host3': 'test'&#125;dic['host2'] = 'abc' #修改操作print(dic) #执行结果：&#123;'host1': 'test', 'host2': 'abc', 'host3': 'test'&#125;---------------------------------------------------------------------------------------------------------------------------dic = dict.fromkeys(['host1','host2','host3'],['test1','test2']) #列表中每一个都为键，后一个为值print(dic) #&#123;'host1': None, 'host2': None, 'host3': None&#125;dic['host2'][1] = 'abc' print(dic) #执行结果：# &#123;'host1': ['test1', 'abc'], 'host2': ['test1', 'abc'], 'host3': ['test1', 'abc']&#125;,都改了。。浅拷贝。# 这种方法建立的字典所有的值都指向一个列表所在的空间，所以改变一个 之后都会改变，这种现象学名叫--浅拷贝--# 因此不建议使用这种方式进行字典的初始化。 6. 字典嵌套(这个没什么好说的。。)。二. 字符串 顾名思义，就是一串字符 1. 乘法，切片操作1234# 乘法操作print("hello"*5) # 执行结果：hellohellohellohellohello：输出了五个hello# 切片print('hello world'[2:]) # 执行结果： llo world 这里说一下，无论是字符串，还是列表，元组，他们的下标都是从0开始的，而且切片原则是–包头不包尾，所有的涉及到下标的操作方法基本上都是–包头不包尾，java中也是 2. 关键字in 判断12print('hello' in 'hello word') # 判断hello是否在hello world中，，执行结果：Trueprint(123 in [2, 3, 4, 5, 123]) # 123是否在列表中。。执行结果：True 3. 格式化输出 第一种方法1print('name:%s,score:%d' % ('hai tao', 2)) # name:hai tao,score:2 输出格式如上，记住就行，有过c基础的应该能看懂 第二种方法12345st = 'hello kitty &#123;name&#125; is &#123;age&#125;'print(st)# 执行结果：hello kitty &#123;name&#125; is &#123;age&#125;print(st.format(name='hai tao', age=37)) # 调用st字符对象的format函数传值。# 执行结果：hello kitty hai tao is 37 4. 字符串拼接 第一种方法 1234a = '123'b = 'abc'c = a+' '+b # 效率低print(c) # 通过+号来对字符串进行连接，执行结果：123 abc 第二种方法 1234a = '123'b = 'abc'c = '***'.join([a, 'ABC', b]) # 通过前面的字符拼接，这里的“***”可以替换为任意字符print(c) # 执行结果：123***ABC***abc 通常使用第二种方法进行字符串的连接，效率高。注意：join中的传入的参数为一个列表 5. String的内置方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465st = 'hello kitty &#123;name&#125; is &#123;age&#125;'print(st.count('l')) # 统计元素个数 # 执行结果：2print(st.capitalize()) # 首字母大写,不改变原来字符串 # 执行结果：Hello kitty &#123;name&#125; is &#123;age&#125;print(st.center(50, '-')) # 居中，只能是字符，不能是空格或者字符串# 执行结果：-----------hello kitty &#123;name&#125; is &#123;age&#125;------------print(st.endswith('ty')) # 以什么结尾 # 执行结果：Falseprint(st.startswith('h')) # 以什么开头 True 很重要，文件操作，判断是否为想要的内容# 执行结果：Trueprint(st.expandtabs(20)) # \t# 执行结果：hello kitty &#123;name&#125; is &#123;age&#125;print(st.find('e')) # 寻找字符，返回其索引值，没有返回-1# 执行结果：1print(st.format(name='hai tao', age=37)) # 格式化输出的另一个方式, 赋值方式 # 执行结果：hello kitty hai tao is 37print(st.format_map(&#123;'name':'zhangjitao','age':37&#125;)) # 格式化输出，传入字典 # 执行结果：hello kitty zhangjitao is 37print(st.index('e')) # 跟find一样，找不到就报错# 执行结果：1print('ert456'.isalnum()) # 只包含字母和数字（汉字也行）就返回true# 执行结果：Trueprint('023452'.isdecimal()) # 是否为十进制数是就返回True# 执行结果：Trueprint('234'.isdigit()) # 判断是否为数字True# 执行结果：Trueprint('234514'.isnumeric()) # 判断是否为数字True# 执行结果：Trueprint('24aslkjf'.isidentifier()) # 检测是否为非法变量# 执行结果：Falseprint('abc'.islower()) # 检验是否为小写（全小写）# 执行结果：Trueprint('A'.isupper()) # 检验是否为全大写# 执行结果：Trueprint('ABC'.isspace()) # 检验是否为空格# 执行结果：Falseprint('Istitle i'.istitle()) # 判断每个单词首字符是否大写# 执行结果：Falseprint('Alskd'.lower()) # 大写变小写# 执行结果：alskdprint('Alskd'.upper()) # 小写变大写# 执行结果：ALSKDprint('Alskd'.swapcase()) # 大写变小写,小写变大写，反转# 执行结果：aLSKDprint('Alskd'.ljust(50, '*')) # 在左侧# 执行结果：Alskd*********************************************print('Alskd'.rjust(50, '*')) # 在右侧# 执行结果：*********************************************Alskdprint(' Alsk d '.strip()) # 开头结尾的空格，换行去掉# 执行结果：Alsk dprint(' Alsk d '.lstrip()) # 开头的空格，换行去掉# 执行结果：Alsk d print(' Alsk d '.rstrip()) # 结尾的空格，换行去掉# 执行结果： Alsk dprint('My title'.replace('title', 'lession')) # 替换内容，参数可控制替换次数# 执行结果：My lessionprint('My title'.rfind('t')) # 从右往左找，返回其索引值# 执行结果：5print('My title'.split(' ')) # 分割，返回一个列表# 执行结果：['My', 'title']print('My title'.rsplit(' ', 1)) # 从右开始分割# 执行结果：['My', 'title']print('My title'.title()) # 每个单词首字符大写# 执行结果：My Title 三. 编码与解码1. 背景 编码与解码encode and decode二进制–&gt;ASCII:只能存英文和拉丁字符，一个字符占一个字节，8位——-&gt;gb2312:只能6700个中文，1980——–&gt;gbk1.0:存了2万多字符，1995———-&gt;gb18030:27000中文，2000 ———-&gt;unicode(万国码，一个编码标准):utf-32:一个字符占4个字节———-&gt;unicode(万国码，一个编码标准):utf-16:一个字符占2个字节或者两个以上，65535———-&gt;unicode(万国码，一个编码标准):utf-8:（可变长的），一个英文用ASCII存，一个中文3个字节 2. python3中的编码解码12345678910import chardet,sysprint(sys.getdefaultencoding()) # 系统默认编码 utf-8s = "I am 海涛！"print("初始字符：%s" % (s,)) # 初始字符。 执行结果：I am 海涛！s = s.encode('gbk') # 编码成为gbk码，参数为要编成的码print(s) # 执行结果：b'I am \xba\xa3\xcc\xce\xa3\xa1's = s.decode('gbk') # 解码为系统默认编码，参数为初始的编码,解码成字符串print(s) # 执行结果：I am 海涛！s = s.encode('utf-8') # 编码成utf-8 bytes格式，print(s) # 执行结果：b'I am \xe6\xb5\xb7\xe6\xb6\x9b\xef\xbc\x81' encode编码时将数据转换成bytes格式decode解码时将bytes转换成字符串]]></content>
      <categories>
        <category>吃</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可能？]]></title>
    <url>%2F2019%2F05%2F12%2F%E5%8F%AF%E8%83%BD%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[告别可能，抛弃也许，丢下应该。一定会遇到不一样的自己 问题 曾经有一个朋友对我说起，”诶，你为什么这么喜欢说’可能’……这种模棱两可的词语啊,搞得人们对你很没有安全感！”。我不以为意，当时心中笑他幼稚，世上哪有一定的事情啊，1+1都不一定等于2，我说‘可能’是对我说过的话负责而已啊。于是出现了下面的场景： “海涛，这道题你确定是这样做的吗？”。”也许吧，我也不怎么清楚，老师好像是这么讲的！”“哥们，到这个地方是这么走的吧？”。”好像是，我也不是很确定。（明明自己走了好多次，却不自信）”“兄弟，你那么喜欢那个女生怎么不去追呀！”。”喜欢是喜欢，但是我这条件应该没希望！”“同学，你能考上学校吗？”。”可能吧，如果考不上怎么怎么样。。。。。。”……直到前些天，那位朋友再次指出我的这个问题，我才意识到，才深刻反思！我曾以为这样说，是对自己对别人负责吧，因为如果这道题错了，”看吧，我当时只是说也许哦！”。因为如果给别指错路了，”看吧，我说过我也不确定！”。如果真的没跟那个女孩在一起，”唉，我就说没希望吧！”。如果真的没考上，”唉，我就知道考不上！” 很讨厌对不对，但是这却是我之前一直信奉的处世之道。我也曾反思，但是却没意识到问题的严重性。因为，当我想要改正的时候，总是在给别人指路的时候指错，在给别人讲题的时候，讲错。。。。。但是，亏我还是个理科生，却不懂概率的奥秘。亏我还自称社会主义接班人，唯物主义小青年，却不懂用辩证的方法看待这些事情！ 严重性 常常说这样的话，自以为是对自己，对别人负责。实际上呢是不想负责任。不想对自己说过的话负责，不想对别人负责。也是不自信，对自己不自信，对别人不自信。久而久之，丢了自己，失去了朋友。 经过几天的反思自省，确实是这些话，潜移默化地影响了自己的思想，从而导致行为上了懒散，因为无论做什么事情都为自己找好了退路，找好了借口。看的太远，想的太多，结果事情总是按自己最坏的打算进行着，尽管勉强能应付着，但是难道事情不应该更好的发展吗，因此我错过了多少的机会，失去了多少的朋友！！！ 同时那种对别人负责的借口根本就不成立，私以为，真正的负责是敢做敢当，错了又如何，今后改正便可，这道题目做错了，下次，肯定的说”嗯，这道题肯定这么写”。这次为别人指错路了，下次再有人问,”对，从这里走肯定对“。这个女生错过了，”该做的都做了，还有什么后悔！”。没考上学校，”什么？没考上，开玩笑？那不可能！”。所以错不可怕，怕的是不敢错，错了不认错。跑题了。 原因 近朱者赤，近墨者黑。首先解释一下，不存在什么对他人的任何歧视，相反，对那些社会底层的劳动人民充满了怜悯和同情，对社会的不公充满了悲愤，但是身边的人确实是能够影响自己的，不论身边的人是什么社会成分。小时候是家庭，后来是学校。无论在哪里，如果身边的人充满了戾气，充满了悲观，还请远离，不要奢望着能够自命清高，最起码我做不到，你也许可以,不，你不可以，你一定会受到影响。然后尽量用自己的乐观，积极影响他人，你是什么样的人，你身边就会是什么样的人。 自然，自身的原因当然不可忽略，就我而言，性格顺从，便是致命的弱点，再加上环境，简直要完！ How to do 自然，羊毛出在羊身上，要摆脱这种恶性的死循环，从源头做起，今后尽量少用或者不用’可能’一类的词汇，不，今后一定不再使用’可能’这类的词汇，你们从我这里得到的答案肯定是肯定的。我说的话也都应该是肯定的，不, 也都一定是肯定的。 先从上面的行动做起，对于性格的问题，自以为本人性格好大于坏，我认为对的，我一定改正，做事大气，不卑不亢，是目标。 误区 不懂装懂，让人心烦，平时当玩笑，关键时候坏事儿。当然，平时最看不惯明明什么都不懂还硬要认为自己是对的的人，你提建议，发表意见，自然是欢迎的。但是你啥也不知道就胡说八道，还确认自己是对的，真没意思。跟你找出证据证明你是错的，你却笑笑说”都一样了”。。很烦的好不好。 自然，见贤思齐，见不贤自省，按照我那种方法改正本文中所说的问题，很容易就会误入以上行为，为了避免，实行”解释制方法”：我这个人有个致命的错误和缺点，就是懒得解释。我承认这种事情应该改正，不，是一定要改正。。。。。就是在自己也不确定的时候，说出自己的理由，说出自己这么想的理由，说出自己这么做的理由，可能语言的表达不是那么好，但是一定不要少了这个步骤，活了二十年了，才渐渐知道这个道理。人类不是三体人，我们的思想不透明，要不断的交流了解。 总结 come on baby !我今后肯定会在每周发至少一篇的博客，尽管很忙（解释）我一定能成功，为什么不能，。！每周一定至少跑六天的步。！……先到这里，晚安！]]></content>
      <categories>
        <category>乐</category>
      </categories>
      <tags>
        <tag>感受</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux学习02]]></title>
    <url>%2F2019%2F05%2F06%2Flinux%E5%AD%A6%E4%B9%A002%2F</url>
    <content type="text"><![CDATA[linux下的常用命令未完待续。。。。。。 由于初次接触，命令可能不全，或者解释不到位，之后会进行补充，修改。如有错误请联系本人指正，感激不尽。 一： ls list的缩写，将当前目录下的所有文件打印到屏幕窗口上。 参数：linux中，命令的参数格式为 -(小减号)和具体字符 和自定义参数(一些有，一些没有) （自己总结，有错请指正！） -a ls -a #a是all的缩写，在linux中，隐藏的文件在文件名前面有 .号表示该文件为隐藏文件 -l ls -l #long的缩写，将 文件以长列表的格式表示出来 -h ls -lh #human的缩写，将文件以人类友好的格式表示出来，一般跟-l一起使用 cd 重定向目录指令，change dir的缩写。 后面紧跟要到达的目录的路径，特殊的： . 表示当前路径， .. 表示父目录 ，如果不跟任何参数，则回到当前用户的家目录 pwd print working dir的缩写，打印出当前所在目录的路径 mkdir make dir的缩写，创建目录 -p mkdir -p ./aaa/bb/ccc #p是parent的缩写，创建一个多层目录 touch touch 文件名 #如果文件不存在，则创建文件。如果文件存在，则改变文件的时间戳为当前时间。(时间戳是最后一次操作的时间) -c touch -c 文件名 #creat的缩写，使用-c参数，无论文件是否存在，都不创建文件 -t touch -t 时间 文件名 #time 的缩写，将文件的时间戳改为指定的时间 rm remove的缩写，删除文件，不是放到回收站，删除了就没了，慎用该命令 -r rm -r aa #recursive(递归)的缩写，递归删除一个目录文件中的所有内容，包括该目录 -f rm -f aa #无视是否正在运行，强制删除 -i rm -i aa #提示是否删除，小心谨慎 mv move 文件 目录的缩写，第一个参数传递的文件移动到第二个传入的目录下 cp copy的缩写，复制一个文件到制定的位置 cp stat]]></content>
      <categories>
        <category>吃</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux学习01]]></title>
    <url>%2F2019%2F05%2F06%2Flinux%E5%AD%A6%E4%B9%A001%2F</url>
    <content type="text"><![CDATA[#安装Ubuntu系统未完待续。。。。。。本人选择ubuntu系统来学习Linux，经过一个月的鼓捣，也就仅仅掌握一些基本的命令知识，在此做下笔记，以备巩固复习，同时分享知识以及使用安装学习过程中的一些坑。 ###虚拟机或者双系统安装我们可以通过安装虚拟机或者双系统来进行ubuntu的学习。当然相对来说虚拟机会更加简单一些，但是由于是使用软件模拟出的硬件来安装的系统，所以在使用过程中难免会出现不流畅，卡顿的现象。而双系统相对麻烦，但是安装成功后使用的会很爽。。（个人感觉） 虚拟机安装 下载]]></content>
      <categories>
        <category>吃</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python学习笔记01]]></title>
    <url>%2F2019%2F05%2F05%2Fpython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%2F</url>
    <content type="text"><![CDATA[热身该笔记为学习python3所作适合有其他语言基础的人们阅读，初学者可能有些吃力，如有困难，请联系本人。当然，大神就见笑了。 ##基本操作以及列表，切片 输入，输出语句 以及 字符串占位符 输入，输出 123print("Hello World!") # 在屏幕生输出Hello World!name = input("please input your name: ")； # 输入内容给变量name,括号内字符串为输出到屏幕上提醒输入内容。默认的输入类型为字符串类型!print(name) # 打印刚刚输入的name变量 占位符 12msg = "your name is %s"%(name) # 格式化字符串，其中%s为占位符，输出时，将name变量的值替代%s的位置，当然还有其他类型占位符号，想了解请自行查找。 print(msg) # 相当于 print("your name is %s"%(name)) 控制语句 if 和 while代码是连续的，在这里分开书写看得更友好 if语句 1234567flag = 5000 # 标志变量dream = 6000if dream &gt; flag: # 如果dream的变量大于flag，则条件成立，执行下面的语句 print('You win!')else: # 条件没有成立，执行下面的语句 print('Loser!') while语句 1234567891011121314151617181920counter = 5while counter &gt; 0: # 如果条件成立，则执行循环体内的内容，如果不成立则退出循环， dream = input("please input dream:") dream = int(dream) # 类型转换，默认输入类型为字符串类型，转换为int(整数)类型 counter -= 1 # counter进行减一操作，相当于语句 counter = counter - 1 if dream &gt; flag: # 如果dream的变量大于flag，则条件成立，执行下面的语句 print('You win!') else: # 条件没有成立，执行下面的语句 print('Loser!') over = input("Is over ?(y/n)") if over == 'y': breakelse: # 如果正常循环完毕则执行该条件下语句块（python特有），非正常情况（遇到break等） print('wrong!')print("over!") # 退出循环后执行的语句 列表，切片跟c语言中的数组，java中的容器类似，但是更加灵活 切片 123456789101112names = ['jitao', 'liuyang', 'xuxu', 'dream', '666', 'xiyangyang', 'monkey']# 切片格式 列表变量名[起始位置:结束位置:步长(可省略)]print(names[2:4]) # 获取names列表索引的第2,3个位置元素(索引位置从0开始)print(names[2:5:2]) # 步长为2，获取names列表索引的第2,4个位置元素(索引位置从0开始)# 负数表示从最后往前数，-1代表最后一个元素，这里的-1相当于6print(names[2:-1:2]) # 步长为2，获取names列表索引的第2,4个位置元素(索引位置从0开始)# 步长为负数表示从后往前取值，print(names[2:-1:-2]) # 这里因为 结束位置 在起始位置的后面，但是从起始位置开始向前取值，所以无值，所以返回一个空列表print(names[-1:2:-2]) # 注意理解着学习。 names[-1:2]=['monkey','xiyangyang','666','dream'] 查询 12print(names[1]) # 查询索引值为1的元素，从0开始print(names[1:4]) # 利用切片查询，返回一个列表，注意 包头不包尾 修改 12names[3] = 'heihei' # 直接修改names[1:3] = ['enen', 'anan'] # 利用切片修改 增加 12345names.append('xiaoxiao') # append()方法 向列表增加一个元素，添加到了末尾names.insert(3, '2333') # insert()方法 向指定的索引位置添加一个元素names2 = ['aaa', 'bbb', 'ccc']names.extend(names2) # extend()方法 将names2列表，添加到names列表后面print(names) 删除 1234567names.remove('aaa') # 通过内容删除元素names.pop(3) # 通过索引删除元素，有返回值。del names[3] # 通过 del 删除# del names # 删除一个列表，列表不存在了# names.clear() # 清空列表但是列表还存在 列表其他方法 1234567891011121314names.count('aaa') # 查询有多少个aaa元素names.index('bbb') # 返回该元素的索引值names.sort() # 排序n = sorted(names) # sorted()函数，返回一个排好序的列表，但不改变原列表print(n)print(names)names.reverse() # 将列表反过来r = list(reversed(names)) # reversed()函数，返回一个倒过来的列表，但不改变原列表print(r)print(names)]]></content>
      <categories>
        <category>吃</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正气歌]]></title>
    <url>%2F2019%2F04%2F29%2F%E6%AD%A3%E6%B0%94%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[作者：文天祥 天地有正气，杂然赋流形。 ：天地之间有一股堂堂正气，它赋予万物而变化为各种体形。 下则为河岳，上则为日星。 ：在下面就表现为山川河岳，在上面就表现为日月辰星。 於人曰浩然，沛乎塞苍冥。 : 在人间被称为浩然之气，它充满了天地和寰宇。 皇路当清夷，含和吐明庭。 : 国运清明太平的时候，它呈现为祥和的气氛和开明的朝廷。 时穷节乃见，一一垂丹青。 : 时运艰危的时刻义士就会出现，他们的光辉形象一一垂于丹青。 在齐太史简，在晋董狐笔。 : 在齐国有舍命记史的太史简，在晋国有坚持正义的董狐笔。 在秦张良椎，在汉苏武节。 : 在秦朝有为民除暴的张良椎，在汉朝有赤胆忠心的苏武节。 为严将军头，为嵇侍中血。 : 它还表现为宁死不降的严将军的头，表现为拼死抵抗的嵇侍中的血。 为张睢阳齿，为颜常山舌。 : 表现为张雎阳誓师杀敌而咬碎的齿，表现为颜常山仗义骂贼而被割的舌。 或为辽东帽，清操厉冰雪。 : 有时又表现为避乱辽东喜欢戴白帽的管宁，他那高洁的品格胜过了冰雪。 或为出师表，鬼神泣壮烈。 : 有时又表现为写出《出师表》的诸葛亮，他那死而后已的忠心让鬼神感泣。 或为渡江楫，慷慨吞胡羯。 : 有时表现为祖逖渡江北伐时的楫，激昂慷慨发誓要吞灭胡羯。 或为击贼笏，逆竖头破裂。 : 有时表现为段秀实痛击奸人的笏，逆贼的头颅顿时破裂。 是气所磅礴，凛烈万古存。 : 这种浩然之气充塞于宇宙乾坤，正义凛然不可侵犯而万古长存。 当其贯日月，生死安足论。 : 当这种正气直冲霄汉贯通日月之时，活着或死去根本用不着去谈论！ 地维赖以立，天柱赖以尊。 : 大地靠着它才得以挺立，天柱靠着它才得以支撑。 三纲实系命，道义为之根。 : 三纲靠着它才能维持生命，道义靠着它才有了根本。 嗟予遘阳九，隶也实不力。 : 可叹的是我遭遇了国难的时刻，实在是无力去安国杀贼。 楚囚缨其冠，传车送穷北。 : 穿着朝服却成了阶下囚，被人用驿车送到了穷北。 鼎镬甘如饴，求之不可得。 : 如受鼎镬之刑对我来说就像喝糖水，为国捐躯那是求之不得。 阴房阗鬼火，春院闭天黑。 : 牢房内闪着点点鬼火一片静谧，春院里的门直到天黑都始终紧闭。 牛骥同一皂，鸡栖凤凰食。 : 老牛和骏马被关在一起共用一槽，凤凰住在鸡窝里像鸡一样饮食起居。 一朝蒙雾露，分作沟中瘠。 : 一旦受了风寒染上了疾病，那沟壑定会是我的葬身之地。 如此再寒暑，百疠自辟易。 : 如果能这样再经历两个寒暑，各种各样的疾病就自当退避。 哀哉沮洳场，为我安乐国。 : 可叹的是如此阴暗低湿的处所，竞成了我安身立命的乐土住地。 岂有他缪巧，阴阳不能贼。 : 这其中难道有什么奥秘，一切寒暑冷暖都不能伤害我的身体。 顾此耿耿存，仰视浮云白。 : 因为我胸中一颗丹心永远存在，功名富贵对于我如同天边的浮云。 悠悠我心悲，苍天曷有极。 : 我心中的忧痛深广无边，请问苍天何时才会有终极。 哲人日已远，典刑在夙昔。 : 先贤们一个个已离我远去，他们的榜样已经铭记在我的心里。 风檐展书读，古道照颜色。 : 屋檐下我沐着清风展开书来读，古人的光辉将照耀我坚定地走下去。 参考：https://hanyu.baidu.com/shici/detail?pid=a6bf616b62444d10806633315c03733a&amp;from=kg0 注： 太史简：指史官临难不苟，敢于秉笔直书的典实。 参考：https://baike.baidu.com/item/太史简/5379024?fr=aladdin 董狐笔：晋灵公昏庸无道，他的宰相赵盾意欲发展强大晋国，因此灵公做事不免有些碍手碍脚，所以屡次派人刺杀赵盾，所以赵盾只好逃出城去，在其未出城时，其亲戚赵穿得知此事，将灵公杀害。史官董狐笔书：秋七月，赵盾弑其君。后人赞赏董狐笔的耿直，。。赵盾的大度。。斯以为，宣扬的道理是好的，但董狐笔简直愚昧，不可理喻。 张良椎：张良椎，典故名。典出《史记》卷五十五〈留侯世家〉。汉留侯张良曾派一大力士用大椎伏击出巡的秦始皇。后遂以“张良椎”指汉张良狙击秦始皇的铁椎，亦为此事之典。 参考：https://baike.baidu.com/item/张良椎/5898589?fr=aladdin 苏武节：苏武节，典故名，典出《汉书》卷五十四〈李广苏建列传??苏建??（子）苏武〉。指苏武出使匈奴时所持的符节。 汉武帝天汉元年， 苏武以中郎将使持节出使匈奴 ，单于留不遣，欲其降， 武坚贞不屈，持汉节牧羊于北海畔十九年， 始元六年得归，须发尽白。后以“苏武节”用忠臣的典故。 参考：https://baike.baidu.com/item/苏武节/9961786?fr=aladdin 严将军头：严将军头是汉语词语，出自《三国志.蜀书.张飞传》，释义是坚强不屈，大义凛然的精神。刘备攻取西蜀，张飞攻打严颜所驻州，张飞设计擒住严颜，呵斥到：为何不投降！，严颜回答说：这里只有断头的将军，没有投降的将军。 嵇侍中血：是指忠臣之血。应该留下姓名：嵇绍 张睢阳齿：张睢阳齿是汉语词汇，取典于唐朝时期张巡守城卫国心切，牙齿皆被咬碎。 [1] 比喻对敌人切齿地痛恨。 参考：https://baike.baidu.com/item/张睢阳齿/8900780?fr=aladdin 颜常山舌：唐代安禄山叛乱，常山太守颜杲卿因城陷被俘，骂不绝口，禄山割其舌，问：‘复能骂否？”杲卿乃不屈而死(见《新唐书??颜杲卿传》)。后以“常山舌”指其事，为宁死不屈之典。 参考：https://baike.baidu.com/item/常山舌/7442499?fr=aladdin 出师表： 辽东帽：管宁系东汉北海朱虚人，春秋时代齐国名相管仲后人。管宁学问渊博，品德高尚，朝廷屡次请他做官都被他拒绝了。不愿与贪官同流合污，毅然来海城隐居。为了表明自己清白高雅的节操，他常常戴着白色的皂帽（皂帽，一种帽子的样式），这就是”辽东皂帽”典故的由来。 参考：https://baike.baidu.com/item/辽东帽/10842314?fr=aladdin 渡江楫：祖逖率兵伐石赵，渡江于中流，祖逖手敲船桨（中流击揖），向众人发誓说：“祖逖此去，若不能平定中原，驱逐敌寇，则如这涛涛江水，一去不返！”后遂以“渡江楫”等指晋祖逖统兵北伐，渡江中流，拍击船桨，立誓收复中原的故事。后以为出征宣誓的典故。 参考：https://baike.baidu.com/item/渡江楫/9510128 击贼笏：典故名，典出《旧唐书》卷一百二十八〈段秀实列传〉。唐德宗时，朱泚反，召段秀实议事， 秀实 以笏击泚，大骂，被杀。后以“击贼笏”为称颂忠贞或正气凛然的典实。 https://baike.baidu.com/item/击贼笏/3513633?fr=aladdin 个人感觉：中华大地，从古至今都不乏舍身取义慷慨之士，但是从概率上来说也是应该这样的。。从小就听大人讲，知道岳飞，忠义之士。在后来在课本上学到过零丁洋，了解到文天祥。北宋末年岳飞，南宋末年文天祥。但是虽是忠义之人却下场悲惨，反而奸佞之人活得风生水起，惩罚便是遗臭万年。然而身为当下时代的小人物，那些投机取巧之人整日载歌载舞，潇潇洒洒，却再没有什么惩罚，所谓笑贫不笑娼。而老实厚忠之人却再无立足之地。但是如诗言，无论怎样要有敬畏之心，要相信头上三尺有神灵，现在也只能靠良心对自己的所作所为约束。我也只能要求自己知事故而不事故，这怕是最后的底线了吧！]]></content>
      <categories>
        <category>喝</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网址集合]]></title>
    <url>%2F2019%2F04%2F28%2F%E7%BD%91%E5%9D%80%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[一.资源网站1. 图片 Font awe图标http://www.fontawesome.com.cn/faicons/ 网站背景https://www.toptal.com/designers/subtlepatterns/ unsplash图片http://unsplash.lofter.com/ 随机指定分辨率unsplash图片（加载慢，服务器在国外）https://unsplash.it/1600/900?random Bing的随机图片https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture 返回随机图片, 需指定分辨率http://lorempixel.com/1600/900 来自github的项目 github.com/xCss/binghttps://bing.ioliu.cn/v1/randhttps://bing.ioliu.cn/v1/rand?w=1920&amp;h=1200 2. 图书 知乎分享kindle使用：https://www.zhihu.com/question/21158269 百度贴吧azw3资源：https://tieba.baidu.com/f?kw=azw3 鸠摩搜书https://www.jiumodiary.com/ 书伴https://bookfere.com/ 脚本之家https://www.jb51.net/books/ 图灵社区http://www.ituring.com.cn/ 就爱计算机http://www.jiuaijsj.com/ 中国国家图书馆http://www.nlc.cn/ 3. java_jar包下载 https://mvnrepository.com/ https://www.findjar.com/index.x 4. 在线工具 在线工具http://tool.oschina.net/ 在线制图https://www.processon.com/ ip地址查询http://www.ip138.com/ 二. 学习网站1. 课程学习 慕课网https://www.imooc.com/ 网易公开课https://open.163.com/ 我要自学网https://www.51zxw.net/ 极客学院（编程）http://www.jikexueyuan.com/ 菜鸟教程（编程）https://www.runoob.com/ 实验楼（编程）https://www.shiyanlou.com/ 2. 专业学习 linux公社https://www.linuxidc.com/ 鸟叔的linux私房菜http://linux.vbird.org/ linux中国开源社区https://linux.cn/ java视频教程推荐http://tech.163.com/special/00091T71/javashipin.html leetcodehttps://leetcode-cn.com/ 牛客https://www.nowcoder.com/ PAThttps://www.patest.cn/ githubhttps://github.com/ csdnhttps://www.csdn.net/ 博客园https://www.cnblogs.com/]]></content>
      <categories>
        <category>吃</category>
      </categories>
      <tags>
        <tag>网址</tag>
      </tags>
  </entry>
</search>
